#!/usr/bin/env php
<?php
declare(strict_types=1);
namespace coveralls\cli;

use Commando\{Command};
use coveralls\{Client};
use EventLoop\{EventLoop};
use Rx\{Observable, Scheduler};
use Rx\Scheduler\{EventLoopScheduler};

/**
 * @var string The version number of this package.
 */
const VERSION = '2.0.0';

/**
 * Application entry point.
 * @return Observable Completes when the program is terminated.
 */
function main(): Observable {
  // Initialize the application.
  @cli_set_process_title('Coveralls.php');

  Scheduler::setDefaultFactory(function() {
    return new EventLoopScheduler(EventLoop::getLoop());
  });

  // Parse the command line arguments.
  $program = new Command;
  $program->setHelp('Send Clover and LCOV coverage reports to the Coveralls service.');

  $program->flag('v')->aka('version')
    ->description('Output the version number.')
    ->boolean();

  $program->argument()->referToAs('file')
    ->description('The coverage report to upload.')
    ->file();

  // Run the program.
  if ($program['version']) {
    echo VERSION, PHP_EOL;
    return Observable::empty();
  }

  if (!is_string($program[0])) {
    $program->printHelp();
    exit(1);
  }

  // Run the program.
  return Observable::of($program[0])
    ->map(function(string $path): string {
      return (string) @file_get_contents($path);
    })
    ->flatMap(function(string $coverage): Observable {
      if (!mb_strlen($coverage)) return Observable::error(new \RuntimeException('The specified file is not found.'));

      $env = $_ENV ?: $_SERVER;
      $client = new Client($env['COVERALLS_ENDPOINT'] ?? Client::DEFAULT_ENDPOINT);
      echo '[Coveralls] Submitting to ', $client->getEndPoint(), PHP_EOL;
      return $client->upload($coverage);
    });
}

// Start the application.
$fileInfo = new \SplFileInfo(__DIR__.'/../../../autoload.php');
require_once $fileInfo->isFile() ? $fileInfo->getPathname() : __DIR__.'/../vendor/autoload.php';

main()->subscribe(null, function(\Throwable $e) {
  echo $e, PHP_EOL;
  exit(2);
});
