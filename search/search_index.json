{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coveralls for PHP Send LCOV and Clover coverage reports to the Coveralls service, in PHP . Quick start Install the latest version of Coveralls for PHP with Composer : composer require cedx/coveralls For detailed instructions, see the installation guide .","title":"Overview"},{"location":"#coveralls-for-php","text":"Send LCOV and Clover coverage reports to the Coveralls service, in PHP .","title":"Coveralls for PHP"},{"location":"#quick-start","text":"Install the latest version of Coveralls for PHP with Composer : composer require cedx/coveralls For detailed instructions, see the installation guide .","title":"Quick start"},{"location":"features/","text":"Features Coverage formats Currently, this package supports two formats of coverage reports: Clover : the main format used with PHPUnit . LCOV : the de facto standard. CI services This project has been tested with Travis CI service, but these services should also work with no extra effort: AppVeyor CircleCI Codeship GitHub Actions GitLab CI Jenkins Semaphore Solano CI Surf Wercker Tip You can find an example workflow for GitHub Actions in the sources of this project. Environment variables If your build system is not supported, you can still use this package. There are a few environment variables that are necessary for supporting your build system: COVERALLS_SERVICE_NAME : the name of your build system. COVERALLS_REPO_TOKEN : the secret repository token from Coveralls . There are optional environment variables: COVERALLS_SERVICE_JOB_ID : a string that uniquely identifies the build job. COVERALLS_RUN_AT : a date string for the time that the job ran. This defaults to your build system's date/time if you don't set it. The full list of supported environment variables is available in the source code of the Coveralls\\Configuration class (see the fromEnvironment() static method). The .coveralls.yml file This package supports the same configuration sources as the Coveralls ones: Coveralls currently supports","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#coverage-formats","text":"Currently, this package supports two formats of coverage reports: Clover : the main format used with PHPUnit . LCOV : the de facto standard.","title":"Coverage formats"},{"location":"features/#ci-services","text":"This project has been tested with Travis CI service, but these services should also work with no extra effort: AppVeyor CircleCI Codeship GitHub Actions GitLab CI Jenkins Semaphore Solano CI Surf Wercker Tip You can find an example workflow for GitHub Actions in the sources of this project.","title":"CI services"},{"location":"features/#environment-variables","text":"If your build system is not supported, you can still use this package. There are a few environment variables that are necessary for supporting your build system: COVERALLS_SERVICE_NAME : the name of your build system. COVERALLS_REPO_TOKEN : the secret repository token from Coveralls . There are optional environment variables: COVERALLS_SERVICE_JOB_ID : a string that uniquely identifies the build job. COVERALLS_RUN_AT : a date string for the time that the job ran. This defaults to your build system's date/time if you don't set it. The full list of supported environment variables is available in the source code of the Coveralls\\Configuration class (see the fromEnvironment() static method).","title":"Environment variables"},{"location":"features/#the-coverallsyml-file","text":"This package supports the same configuration sources as the Coveralls ones: Coveralls currently supports","title":"The .coveralls.yml file"},{"location":"installation/","text":"Installation Requirements Before installing Coveralls for PHP , you need to make sure you have PHP and Composer , the PHP package manager, up and running. Warning Coveralls for PHP requires PHP >= 7.2.0 . You can verify if you're already good to go with the following commands: php --version # PHP 7.3.8 (cli) (built: Jul 30 2019 12:44:08) ( NTS MSVC15 (Visual C++ 2017) x64 ) composer --version # Composer version 1.9.0 2019-08-02 20:55:32 Info If you plan to play with the package sources, you will also need Robo and Material for MkDocs . Installing with Composer package manager 1. Install it From a command prompt, run: composer require cedx/coveralls 2. Import it Now in your PHP code, you can use: <?php use Coveralls\\Http\\ { Client , ClientException };","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Before installing Coveralls for PHP , you need to make sure you have PHP and Composer , the PHP package manager, up and running. Warning Coveralls for PHP requires PHP >= 7.2.0 . You can verify if you're already good to go with the following commands: php --version # PHP 7.3.8 (cli) (built: Jul 30 2019 12:44:08) ( NTS MSVC15 (Visual C++ 2017) x64 ) composer --version # Composer version 1.9.0 2019-08-02 20:55:32 Info If you plan to play with the package sources, you will also need Robo and Material for MkDocs .","title":"Requirements"},{"location":"installation/#installing-with-composer-package-manager","text":"","title":"Installing with Composer package manager"},{"location":"installation/#1-install-it","text":"From a command prompt, run: composer require cedx/coveralls","title":"1. Install it"},{"location":"installation/#2-import-it","text":"Now in your PHP code, you can use: <?php use Coveralls\\Http\\ { Client , ClientException };","title":"2. Import it"},{"location":"about/changelog/","text":"Changelog Version 11.1.0 Added support for GitHub Actions . Added the Job->flagName property. Updated the package dependencies. Version 11.0.0 Breaking change: using camelcase instead of all caps for constants. Removed the dependency on Commando library. Updated the package dependencies. Version 10.1.0 Merge GitHub pull request #6 : added new test cases. Modified the package layout. Updated the package dependencies. Updated the URL of the default API endpoint. Version 10.0.0 Breaking change: moved the Client and ClientException classes to the Coveralls\\Http namespace. Breaking change: replaced \u00c9v\u00e9nement library by PHP League Event for event handling. Added the Coveralls\\Http\\RequestEvent and Coveralls\\Http\\ResponseEvent classes. Updated the package dependencies. Version 9.1.2 Fixed the issue #5 : an invalid output URL was generated when using a well-formed input URL. Version 9.1.1 Improved the handling of SSH-based Git remotes. Version 9.1.0 Replaced the Phing build system by Robo . Updated the package dependencies. Version 9.0.1 Fixed the issue #3 : the CLI used the old signature of the Client constructor. Version 9.0.0 Breaking change: changed the signature of the Client , ClientException and GitRemote constructors. Breaking change: changed the signature of the Job::setRunAt() method. Breaking change: replaced the parser functions by classes. Breaking change: replaced the service functions by classes. Added support for PHPStan static analyzer. Updated the package dependencies. Version 8.0.0 Breaking change: changed the signature of the fromJson() methods. Updated the package dependencies. Version 7.2.0 Dropped the dependency on PHPUnit-Expect . Updated the package dependencies. Version 7.1.0 Added an example code. Updated the package dependencies. Version 7.0.0 Breaking change: changed the signature of the Client events. Breaking change: raised the required PHP version. Breaking change: using PHP 7.1 features, like nullable types and void functions. Added the ClientException class. Added a user guide based on MkDocs . Updated the package dependencies. Version 6.0.0 Breaking change: changed the signature of most class constructors. Breaking change: most class properties are now read-only. Breaking change: the Configuration::fromYaml() method now throws an InvalidArgumentException if the document is invalid. Updated the package dependencies. Version 5.0.0 Breaking change: moved the Observable API to a synchronous one. Breaking change: moved the Subject event API to the EventEmitter one. Changed licensing for the MIT License . Restored the Guzzle HTTP client. Version 4.0.0 Breaking change: properties representing URLs as strings now use instances of the Psr\\Http\\Message\\UriInterface interface. Added new unit tests. Replaced the Guzzle HTTP client by an Observable -based one. Version 3.0.0 Breaking change: renamed the coveralls namespace to Coveralls . Version 2.0.1 Merged pull request #1 : fixes an issue with usages of the array_filter() function. Version 2.0.0 Breaking change: ported some APIs to Observables . Breaking change: replaced the -f|--file named argument of the CLI script by an anonymous argument (e.g. coveralls coverage.xml instead of coveralls -f coverage.xml ) Enabled the strict typing. Replaced phpDocumentor documentation generator by ApiGen . Updated the package dependencies. Version 1.0.0 First stable release. Updated the package dependencies. Version 0.4.0 Breaking change: dropped the dependency on Observables . Breaking change: the Client class is now an EventEmitter . Ported the unit test assertions from TDD to BDD . Updated the package dependencies. Version 0.3.0 Updated the package dependencies. Version 0.2.0 Updated the package dependencies. Version 0.1.0 Initial release.","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#version-1110","text":"Added support for GitHub Actions . Added the Job->flagName property. Updated the package dependencies.","title":"Version 11.1.0"},{"location":"about/changelog/#version-1100","text":"Breaking change: using camelcase instead of all caps for constants. Removed the dependency on Commando library. Updated the package dependencies.","title":"Version 11.0.0"},{"location":"about/changelog/#version-1010","text":"Merge GitHub pull request #6 : added new test cases. Modified the package layout. Updated the package dependencies. Updated the URL of the default API endpoint.","title":"Version 10.1.0"},{"location":"about/changelog/#version-1000","text":"Breaking change: moved the Client and ClientException classes to the Coveralls\\Http namespace. Breaking change: replaced \u00c9v\u00e9nement library by PHP League Event for event handling. Added the Coveralls\\Http\\RequestEvent and Coveralls\\Http\\ResponseEvent classes. Updated the package dependencies.","title":"Version 10.0.0"},{"location":"about/changelog/#version-912","text":"Fixed the issue #5 : an invalid output URL was generated when using a well-formed input URL.","title":"Version 9.1.2"},{"location":"about/changelog/#version-911","text":"Improved the handling of SSH-based Git remotes.","title":"Version 9.1.1"},{"location":"about/changelog/#version-910","text":"Replaced the Phing build system by Robo . Updated the package dependencies.","title":"Version 9.1.0"},{"location":"about/changelog/#version-901","text":"Fixed the issue #3 : the CLI used the old signature of the Client constructor.","title":"Version 9.0.1"},{"location":"about/changelog/#version-900","text":"Breaking change: changed the signature of the Client , ClientException and GitRemote constructors. Breaking change: changed the signature of the Job::setRunAt() method. Breaking change: replaced the parser functions by classes. Breaking change: replaced the service functions by classes. Added support for PHPStan static analyzer. Updated the package dependencies.","title":"Version 9.0.0"},{"location":"about/changelog/#version-800","text":"Breaking change: changed the signature of the fromJson() methods. Updated the package dependencies.","title":"Version 8.0.0"},{"location":"about/changelog/#version-720","text":"Dropped the dependency on PHPUnit-Expect . Updated the package dependencies.","title":"Version 7.2.0"},{"location":"about/changelog/#version-710","text":"Added an example code. Updated the package dependencies.","title":"Version 7.1.0"},{"location":"about/changelog/#version-700","text":"Breaking change: changed the signature of the Client events. Breaking change: raised the required PHP version. Breaking change: using PHP 7.1 features, like nullable types and void functions. Added the ClientException class. Added a user guide based on MkDocs . Updated the package dependencies.","title":"Version 7.0.0"},{"location":"about/changelog/#version-600","text":"Breaking change: changed the signature of most class constructors. Breaking change: most class properties are now read-only. Breaking change: the Configuration::fromYaml() method now throws an InvalidArgumentException if the document is invalid. Updated the package dependencies.","title":"Version 6.0.0"},{"location":"about/changelog/#version-500","text":"Breaking change: moved the Observable API to a synchronous one. Breaking change: moved the Subject event API to the EventEmitter one. Changed licensing for the MIT License . Restored the Guzzle HTTP client.","title":"Version 5.0.0"},{"location":"about/changelog/#version-400","text":"Breaking change: properties representing URLs as strings now use instances of the Psr\\Http\\Message\\UriInterface interface. Added new unit tests. Replaced the Guzzle HTTP client by an Observable -based one.","title":"Version 4.0.0"},{"location":"about/changelog/#version-300","text":"Breaking change: renamed the coveralls namespace to Coveralls .","title":"Version 3.0.0"},{"location":"about/changelog/#version-201","text":"Merged pull request #1 : fixes an issue with usages of the array_filter() function.","title":"Version 2.0.1"},{"location":"about/changelog/#version-200","text":"Breaking change: ported some APIs to Observables . Breaking change: replaced the -f|--file named argument of the CLI script by an anonymous argument (e.g. coveralls coverage.xml instead of coveralls -f coverage.xml ) Enabled the strict typing. Replaced phpDocumentor documentation generator by ApiGen . Updated the package dependencies.","title":"Version 2.0.0"},{"location":"about/changelog/#version-100","text":"First stable release. Updated the package dependencies.","title":"Version 1.0.0"},{"location":"about/changelog/#version-040","text":"Breaking change: dropped the dependency on Observables . Breaking change: the Client class is now an EventEmitter . Ported the unit test assertions from TDD to BDD . Updated the package dependencies.","title":"Version 0.4.0"},{"location":"about/changelog/#version-030","text":"Updated the package dependencies.","title":"Version 0.3.0"},{"location":"about/changelog/#version-020","text":"Updated the package dependencies.","title":"Version 0.2.0"},{"location":"about/changelog/#version-010","text":"Initial release.","title":"Version 0.1.0"},{"location":"about/license/","text":"MIT License Copyright \u00a9 2017 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#mit-license","text":"Copyright \u00a9 2017 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"about/see_also/","text":"See also Development API reference Packagist package Submit an issue Testing Continuous integration Code coverage Other implementations Dart: Coveralls for Dart JavaScript: Coveralls for JS","title":"See also"},{"location":"about/see_also/#see-also","text":"","title":"See also"},{"location":"about/see_also/#development","text":"API reference Packagist package Submit an issue","title":"Development"},{"location":"about/see_also/#testing","text":"Continuous integration Code coverage","title":"Testing"},{"location":"about/see_also/#other-implementations","text":"Dart: Coveralls for Dart JavaScript: Coveralls for JS","title":"Other implementations"},{"location":"usage/api/","text":"Application programming interface The hard way. Use the Coveralls\\Http\\Client class to upload your coverage reports: <?php use Coveralls\\Http\\ { Client , ClientException }; function main () : void { try { $coverage = @ file_get_contents ( '/path/to/coverage.report' ); ( new Client ) -> upload ( $coverage ); echo 'The report was sent successfully.' ; } catch ( Throwable $e ) { echo 'An error occurred: ' , $e -> getMessage (); if ( $e instanceof ClientException ) echo 'From: ' , $e -> getUri (), PHP_EOL ; } } The Client::upload() method throws an InvalidArgumentException if the input report is invalid. It throws a Coveralls\\Http\\ClientException if any error occurred while uploading the report. Client events The Coveralls\\Http\\Client class is a League\\Event\\Emitter that triggers some events during its life cycle. The Client::eventRequest event Emitted every time a request is made to the remote service: <?php use Coveralls\\Http\\ { Client , RequestEvent }; function main () : void { $client = new Client ; $client -> addListener ( Client :: eventRequest , function ( RequestEvent $event ) { echo 'Client request: ' , $event -> getRequest () -> getUri (); }); } The Client::eventResponse event Emitted every time a response is received from the remote service: <?php use Coveralls\\Http\\ { Client , ResponseEvent }; function main () : void { $client = new Client ; $client -> addListener ( Client :: eventResponse , function ( ResponseEvent $event ) { echo 'Server response: ' , $event -> getResponse () -> getStatusCode (); }); }","title":"Programming interface"},{"location":"usage/api/#application-programming-interface","text":"The hard way. Use the Coveralls\\Http\\Client class to upload your coverage reports: <?php use Coveralls\\Http\\ { Client , ClientException }; function main () : void { try { $coverage = @ file_get_contents ( '/path/to/coverage.report' ); ( new Client ) -> upload ( $coverage ); echo 'The report was sent successfully.' ; } catch ( Throwable $e ) { echo 'An error occurred: ' , $e -> getMessage (); if ( $e instanceof ClientException ) echo 'From: ' , $e -> getUri (), PHP_EOL ; } } The Client::upload() method throws an InvalidArgumentException if the input report is invalid. It throws a Coveralls\\Http\\ClientException if any error occurred while uploading the report.","title":"Application programming interface"},{"location":"usage/api/#client-events","text":"The Coveralls\\Http\\Client class is a League\\Event\\Emitter that triggers some events during its life cycle.","title":"Client events"},{"location":"usage/api/#the-clienteventrequest-event","text":"Emitted every time a request is made to the remote service: <?php use Coveralls\\Http\\ { Client , RequestEvent }; function main () : void { $client = new Client ; $client -> addListener ( Client :: eventRequest , function ( RequestEvent $event ) { echo 'Client request: ' , $event -> getRequest () -> getUri (); }); }","title":"The Client::eventRequest event"},{"location":"usage/api/#the-clienteventresponse-event","text":"Emitted every time a response is received from the remote service: <?php use Coveralls\\Http\\ { Client , ResponseEvent }; function main () : void { $client = new Client ; $client -> addListener ( Client :: eventResponse , function ( ResponseEvent $event ) { echo 'Server response: ' , $event -> getResponse () -> getStatusCode (); }); }","title":"The Client::eventResponse event"},{"location":"usage/cli/","text":"Command line interface The easy way. From a command prompt, install the coveralls executable: composer global require cedx/coveralls Tip Consider adding the composer global executables directory to your system path. Then use it to upload your coverage reports: $ coveralls --help Send a coverage report to the Coveralls service. Usage: coveralls [ options ] <file> Options: -h, --help Output usage information. -v, --version Output the version number. For example: coveralls build/coverage.xml","title":"Command line interface"},{"location":"usage/cli/#command-line-interface","text":"The easy way. From a command prompt, install the coveralls executable: composer global require cedx/coveralls Tip Consider adding the composer global executables directory to your system path. Then use it to upload your coverage reports: $ coveralls --help Send a coverage report to the Coveralls service. Usage: coveralls [ options ] <file> Options: -h, --help Output usage information. -v, --version Output the version number. For example: coveralls build/coverage.xml","title":"Command line interface"}]}